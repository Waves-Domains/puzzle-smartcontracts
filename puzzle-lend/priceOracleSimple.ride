{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let lastUpdatedBlockKey = "lastUpdatedBlock"

let whiteListAddresses = [
    Address(base58'3PJKmXoHJvVeQXjSJdhtkUcFDtdiQqMbUTD'),
    Address(base58'3PL4D6MhfMqrSr1d932EMTavcsQN9P9DcUU')
]

let n15List = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
let n60List = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]

func getPriceDataKey(block: Int, type: String, tokenId: String) = {
    "block_" + block.toString() + "_" + type + "_" + tokenId
}

# Find price by type and block number
# type: tokenId - Asset Id
# type: type - Type of price value (minPrce, maxPrice)
# type: block - Block number, if unit, then get block nuber from state (lastUpdatedBlock)
func getPriceValue(tokenId: String, type: String, block: Int|Unit) = {
    let nBlock = match (block) {
        case t:Int => t
        case _ => getIntegerValue(lastUpdatedBlockKey)
    }
    if (nBlock <= 0) then throw("Invalid block value")
    else {
      if (type == "min" || type == "max") then {
        getInteger(getPriceDataKey(nBlock, type, tokenId)).valueOrElse(0)
      }
      else throw("Wrong type name")
    }
}

func getPriceDataEntries(priceList: List[String], height: Int) = {
  func processList(accum: List[IntegerEntry], next: String) = {
    let parsed = next.split("_")
    # parsed[0] - tokenID
    # parsed[1] - price
    let tokenId = parsed[0]
    let newPrice = parseInt(parsed[1]).valueOrErrorMessage("Invalid value parsed price")

    let keyMinPrice = getPriceDataKey(height, "min", tokenId)
    let keyMaxPrice = getPriceDataKey(height, "max", tokenId)

    let currentMinPrice = getInteger(keyMinPrice).valueOrElse(0)
    let currentMaxPrice = getInteger(keyMaxPrice).valueOrElse(0)

    if (newPrice <= 0) then throw("Price cannot be zero or less zero")
    else if (tokenId.size() == 0) then throw("Inavalid value token Id")
    else if (currentMaxPrice == 0 && currentMinPrice == 0) then {
        accum ++ [IntegerEntry(keyMinPrice, newPrice), IntegerEntry(keyMaxPrice, newPrice)]
    } else if (newPrice < currentMinPrice) then {
      accum :+ IntegerEntry(keyMinPrice, newPrice)
    } else if (newPrice > currentMaxPrice) then {
      accum :+ IntegerEntry(keyMaxPrice, newPrice)
    } else {
      accum
    }
  }

  FOLD<100>(priceList, [], processList)
}

# price list item format: token_price
@Callable(i)
func updatePrice(prices: List[String]) = {
  if (whiteListAddresses.indexOf(i.caller) == unit) then throw("Access denied")
  else if (prices.size() == 0) then throw("Price list is empty")
  else {
    [
      IntegerEntry(lastUpdatedBlockKey, height)
    ] 
    ++ getPriceDataEntries(prices, height)
  }
}

@Callable(i)
func getPrice(tokenId: String, debug: Boolean) = {
  let lastUpdatedBlock = getIntegerValue(lastUpdatedBlockKey)

  # todo: add pools value
  if (debug) then
    throw("min: " + getPriceValue(tokenId, "min", unit).toString() + ", max: " +getPriceValue(tokenId, "max", unit).toString())
  else
    ([], (getPriceValue(tokenId, "min", unit), getPriceValue(tokenId, "max", unit)))
}

@Callable(i)
func getPriceAt(block: Int, tokenId: String, debug: Boolean) = {
  # todo: add pools value
  if (debug) then
    throw("min: " + getPriceValue(tokenId, "min", block).toString() + ", max: " +getPriceValue(tokenId, "max", block).toString())
  else
    ([], (getPriceValue(tokenId, "min", block), getPriceValue(tokenId, "max", block)))
}

@Callable(i)
func getTWAP60(tokenId: String, debug: Boolean) = {
  let lastUpdatedBlock = getIntegerValue(lastUpdatedBlockKey)

  # get list max and min prices for 60 blocks
  func getPriceList(accum: (List[Int], Int, String), next: Int) = {
    let (result, block, type) = accum
    let priceValue = getPriceValue(tokenId, type, block)
    let nextBlock = block - next

    if (priceValue > 0) then {
        (result :+ priceValue, nextBlock, type)
    } else (result, nextBlock, type)
  }
  let minPricesList = (FOLD<60>(n60List, ([], lastUpdatedBlock, "min"), getPriceList))._1
  let maxPricesList = (FOLD<60>(n60List, ([], lastUpdatedBlock, "max"), getPriceList))._1

  # calc min max sum prices
  func sum(accum: Int, next: Int) = accum + next
  let minSum = FOLD<60>(minPricesList, 0, sum)
  let maxSum = FOLD<60>(maxPricesList, 0, sum)

  # calc min max average
  let minAverage = fraction(minSum, 1_000_000, fraction(minPricesList.size(), 1_000_000, 1))
  let maxAverage = fraction(maxSum, 1_000_000, fraction(maxPricesList.size(), 1_000_000, 1))

  if (debug) then
    throw("minAv: " + minAverage.toString() +
    ", maxAv: " + maxAverage.toString() +
    ", minPriceListSize: " + minPricesList.size().toString() +
    ", maxPriceListSize: " + maxPricesList.size().toString() +
    ", minSum: " + minSum.toString() +
    ", maxSum: " + maxSum.toString())
  else
    ([], (minAverage, maxAverage))
}

@Callable(i)
func getTWAP15(tokenId: String, debug: Boolean) = {
  let lastUpdatedBlock = getIntegerValue(lastUpdatedBlockKey)

  # get list max and min prices for 15 blocks
  func getPriceList(accum: (List[Int], Int, String), next: Int) = {
    let (result, block, type) = accum
    let priceValue = getPriceValue(tokenId, type, block)
    let nextBlock = block - next

    if (priceValue > 0) then {
        (result :+ priceValue, nextBlock, type)
    } else (result, nextBlock, type)
  }
  let minPricesList = (FOLD<15>(n15List, ([], lastUpdatedBlock, "min"), getPriceList))._1
  let maxPricesList = (FOLD<15>(n15List, ([], lastUpdatedBlock, "max"), getPriceList))._1

  # calc min max sum prices
  func sum(accum: Int, next: Int) = accum + next
  let minSum = FOLD<15>(minPricesList, 0, sum)
  let maxSum = FOLD<15>(maxPricesList, 0, sum)

  # calc min max average
  let minAverage = fraction(minSum, 1_000_000, fraction(minPricesList.size(), 1_000_000, 1))
  let maxAverage = fraction(maxSum, 1_000_000, fraction(maxPricesList.size(), 1_000_000, 1))

  if (debug) then
    throw("minAv: " + minAverage.toString() + ", maxAv: " + maxAverage.toString())
  else
    ([], (minAverage, maxAverage))
}

@Verifier(tx)
func verify() = sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)