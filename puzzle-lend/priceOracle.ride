{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let wxProviderPubKey = base58''
let wavesCapProviderPubKey = base58''

let wxProviderAddress = Address(base58'')
let wavesCapProviderAddress = Address(base58'')

let whiteListAddresses = [
  wxProviderAddress,
  wavesCapProviderAddress
]

let whiteListPubKeys = [
  wxProviderPubKey,
  wavesCapProviderPubKey
]

func getPriceProviderID(address: Address) = {
  if (address == wxProviderAddress) then "WX"
  else if(address == wavesCapProviderAddress) then "WavesCap"
  else unit
}

func getPriceProviderIDByPubKey(pubKey: ByteVector) = {
  if (pubKey == wxProviderPubKey) then "WX"
  else if(pubKey == wavesCapProviderPubKey) then "WavesCap"
  else unit
}

let lastUpdatedBlockKey = "lastUpdatedBlock"

let n15List = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
let n60List = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]

# Find price by type and block number
# type: tokenId - Asset Id
# type: type - Type of price value (minPrce, maxPrice)
# type: block - Block number, if unit, then get block nuber from state (lastUpdatedBlock)
func getPriceValue(tokenId: String, type: String, block: Int|Unit) = {
    let nBlock = match (block) {
        case t:Int => t
        case _ => getIntegerValue(lastUpdatedBlockKey)
    }
    if (nBlock <= 0) then throw("Invalid block value")
    else {
      let blockProvidersKey = "providers"
      let blockProvidersList = getString(blockProvidersKey).valueOrErrorMessage("Price provider not founeded for block " + nBlock.toString()).split(",")

      func getProviderPrices(accum: List[Int], providerID: String) = {
        if (providerID.size() > 0) then {
          let priceValue = getInteger("block_" + nBlock.toString() + "_provider_" + providerID + "_" + type + "_" + tokenId).valueOrElse(0)
          if (priceValue > 0) then {
            accum :+ priceValue
          } else {
            accum
          }
        } else accum
      }

      let priceList = FOLD<10>(blockProvidersList, [], getProviderPrices)

      if (priceList.size() == 0) then throw("Price not founded for providers")
      else if (type == "minPrice") then priceList.min()
      else if (type == "maxPrice") then priceList.max()
      else throw("Wrong type name")
    }
}

func getPriceDataEntries(priceList: List[String], height: Int, providerID: String) = {
  func processList(accum: List[IntegerEntry], next: String) = {
    let parsed = next.split("_")
    # parsed[0] - tokenID
    # parsed[1] - price
    let tokenId = parsed[0]
    let newPrice = parseInt(parsed[1]).valueOrErrorMessage("Invalid value parsed price")

    let keyMinPrice = "block_" + height.toString() + "_provider_" + providerID + "_minPrice_" + tokenId
    let keyMaxPrice = "block_" + height.toString() + "_provider_" + providerID + "_maxPrice_" + tokenId

    let currentMinPrice = getInteger(keyMinPrice).valueOrElse(0)
    let currentMaxPrice = getInteger(keyMaxPrice).valueOrElse(0)

    if (newPrice <= 0) then throw("Price cannot be zero or less zero")
    else if (tokenId.size() == 0) then throw("Inavalid value token Id")
    else if (newPrice < currentMinPrice.value()) then {
      accum :+ IntegerEntry(keyMinPrice, newPrice)
    } else if (newPrice > currentMaxPrice.value()) then {
      accum :+ IntegerEntry(keyMaxPrice, newPrice)
    } else {
      accum
    }
  }

  FOLD<100>(priceList, [], processList)
}

# price list item format: token_pirce
@Callable(i)
func updatePrice(prices: List[String]) = {
  if (whiteListAddresses.indexOf(i.caller) == unit) then throw("Access denied")
  else if (prices.size() == 0) then throw("Price list is empty")
  else {
    let providerID = match getPriceProviderID(i.caller) {
      case p:String => p
      case _ => throw("Provider ID not found")
    }

    # process provider ID
    # let blockProvidersKey = "providers_" + height.toString()
    # let blockProvidersStr = getString(blockProvidersKey).valueOrElse("")
    # let blockProvidersList = blockProvidersStr.split(",")
    # let blockProvidersData = match blockProvidersList.indexOf(providerID) {
    #   case l:Int => []
    #   case _ => [StringEntry(blockProvidersKey, (blockProvidersList ++ [providerID]).makeString(","))]
    # }

    [
      IntegerEntry(lastUpdatedBlockKey, height)
    ] 
    # ++ blockProvidersData
    ++ getPriceDataEntries(prices, height, providerID)
  }
}

@Callable(i)
func getPrice(tokenId: String) = {
  let lastUpdatedBlock = getIntegerValue(lastUpdatedBlockKey)

  # todo: add pools value
  ([], (getPriceValue(tokenId, "minPrice", unit), getPriceValue(tokenId, "maxPrice", unit)))
}

@Callable(i)
func getPriceAt(block: Int, tokenId: String) = {
  # todo: add pools value
  ([], (getPriceValue(tokenId, "minPrice", block), getPriceValue(tokenId, "maxPrice", block)))
}

@Callable(i)
func getTWAP60(tokenId: String) = {
  let lastUpdatedBlock = getIntegerValue(lastUpdatedBlockKey)

  # get list max and min prices for 60 blocks
  func getMinPrice(accum: (List[Int], Int), next: Int) = {
    let (result, block) = accum
    (result :+ getPriceValue(tokenId, "minPrice", block), block - next)
  }
  func getMaxPrice(accum: (List[Int], Int), next: Int) = {
    let (result, block) = accum
    (result :+ getPriceValue(tokenId, "maxPrice", block), block - next)
  }
  let minPricesList = FOLD<60>(n60List, ([], lastUpdatedBlock), getMinPrice)
  let maxPricesList = FOLD<60>(n60List, ([], lastUpdatedBlock), getMaxPrice)

  # calc min max sum prices
  func sum(accum: Int, next: Int) = accum + next
  let minSum = FOLD<60>(minPricesList._1, 0, sum)
  let maxSum = FOLD<60>(maxPricesList._1, 0, sum)

  # calc min max average
  let minAverage = fraction(minSum, 1_000_000, minPricesList.size())
  let maxAverage = fraction(maxSum, 1_000_000, minPricesList.size())

  ([], (minAverage, maxAverage))
}

@Callable(i)
func getTWAP15(tokenId: String) = {
  let lastUpdatedBlock = getIntegerValue(lastUpdatedBlockKey)

  # get list max and min prices for 15 blocks
  func getMinPrice(accum: (List[Int], Int), next: Int) = {
    let (result, block) = accum
    (result :+ getPriceValue(tokenId, "minPrice", block), block - next)
  }
  func getMaxPrice(accum: (List[Int], Int), next: Int) = {
    let (result, block) = accum
    (result :+ getPriceValue(tokenId, "maxPrice", block), block - next)
  }
  let minPricesList = FOLD<15>(n15List, ([], lastUpdatedBlock), getMinPrice)
  let maxPricesList = FOLD<15>(n15List, ([], lastUpdatedBlock), getMaxPrice)

  # calc min max sum prices
  func sum(accum: Int, next: Int) = accum + next
  let minSum = FOLD<15>(minPricesList._1, 0, sum)
  let maxSum = FOLD<15>(maxPricesList._1, 0, sum)

  # calc min max average
  let minAverage = fraction(minSum, 1_000_000, minPricesList.size())
  let maxAverage = fraction(maxSum, 1_000_000, minPricesList.size())

  ([], (minAverage, maxAverage))
}

@Verifier(tx)
func verify() = {

  func checkData(dTx: DataTransaction, providerID: String) = {
    func valid(accum: Boolean, next: BinaryEntry|BooleanEntry|DeleteEntry|IntegerEntry|StringEntry) = {
      match next {
        case t:IntegerEntry => {
          if (accum) then {
            # "block_" + height.toString() + "_provider_" + providerID + "_minPrice_" + tokenId
            let validKey = match t.key.indexOf("block_" + height.toString() + "_provider_" + providerID + "_minPrice_") {
              case k:Int => true
              case _ => false
            }
            (accum && validKey && t.value > 0)
          } else {
            accum
          }
        }
        case _ => accum
      }
    }
    if !FOLD<100>(dTx.data, true, valid) then throw("Invalid data") else true
  }

  func checkSig(accum: (ByteVector|Unit, Boolean), next: ByteVector) = {
    if (!accum._2) then {
      (next, sigVerify(tx.bodyBytes, tx.proofs[0], next))
    } else accum
  }

  let validProvider = FOLD<10>(whiteListPubKeys, (unit, false), checkSig)

  match (tx) {
    case t:DataTransaction =>
        {
          match (validProvider._1) {
            case v:ByteVector => {
              let providerID = getPriceProviderIDByPubKey(v).valueOrErrorMessage("Provider ID not found")
              validProvider._2 && checkData(t, providerID)
            }
            case _ => sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
          }
        }
    case _ => sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
  }
}
        