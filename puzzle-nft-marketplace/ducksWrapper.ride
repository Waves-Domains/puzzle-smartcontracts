{-# STDLIB_VERSION 5 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let nftCreationAddress = base58'3PFQjjDMiZKQZdu5JqTHD7HwgSXyp9Rw9By'

let incubatorAddress = base58'3PEktVux2RhchSN63DsDo4b4mz4QqzKSeDv'
let breederAddress = base58'3PDVuU45H7Eh5dmtNbnRNRStGwULA7NY6Hb'
let farmingAddress = base58'3PAETTtuW7aSiyKtn9GuML3RgtV1xdq1mQW'
let eggAssetId = base58'C1iWsKGqLwjHUndiQ7iXpdmPum9PeCDFfyXBdJJosDRS'

func tryGetInteger(key: String) = {
  match getInteger(this, key) {
      case b:Int => b
      case _ => 0
  }
}

func tryGetString(key: String) = {
  match getString(this, key) {
      case a:String => a
      case _ => ""
  }
}

let accessItemAssetId = tryGetString("static_accessItemAssetId").fromBase58String()
let accessItemPrice = tryGetInteger("static_accessItemPrice")

func isSymbolA(accumulated: Int, sym: String) = { if (sym == "A") then {accumulated+1} else {accumulated+0} }
func isSymbolB(accumulated: Int, sym: String) = { if (sym == "B") then {accumulated+1} else {accumulated+0} }
func isSymbolC(accumulated: Int, sym: String) = { if (sym == "C") then {accumulated+1} else {accumulated+0} }
func isSymbolD(accumulated: Int, sym: String) = { if (sym == "D") then {accumulated+1} else {accumulated+0} }
func isSymbolE(accumulated: Int, sym: String) = { if (sym == "E") then {accumulated+1} else {accumulated+0} }
func isSymbolF(accumulated: Int, sym: String) = { if (sym == "F") then {accumulated+1} else {accumulated+0} }
func isSymbolG(accumulated: Int, sym: String) = { if (sym == "G") then {accumulated+1} else {accumulated+0} }
func isSymbolH(accumulated: Int, sym: String) = { if (sym == "H") then {accumulated+1} else {accumulated+0} }
func isSymbolI(accumulated: Int, sym: String) = { if (sym == "I") then {accumulated+1} else {accumulated+0} }

func getAmountOrClear(amount: String) = {
  if (amount.contains("0")) then {""} else {amount}
}

func getGen(assetName: String) = {
  # getGen("DUCK-ABCDDCBA-GY") -> 2A2B2C2D-G
  let genotype = assetName.drop(5).dropRight(3).split("")
  getAmountOrClear(toString(FOLD<8>(genotype, 0, isSymbolA)) + "A") + getAmountOrClear(toString(FOLD<8>(genotype, 0, isSymbolB)) + "B") + getAmountOrClear(toString(FOLD<8>(genotype, 0, isSymbolC)) + "C") +
  getAmountOrClear(toString(FOLD<8>(genotype, 0, isSymbolD)) + "D") + getAmountOrClear(toString(FOLD<8>(genotype, 0, isSymbolE)) + "E") + getAmountOrClear(toString(FOLD<8>(genotype, 0, isSymbolF)) + "F") +
  getAmountOrClear(toString(FOLD<8>(genotype, 0, isSymbolG)) + "G") + getAmountOrClear(toString(FOLD<8>(genotype, 0, isSymbolH)) + "H") + getAmountOrClear(toString(FOLD<8>(genotype, 0, isSymbolI)) + "I")
}

func getAssetOrigin(generation: String) = {
  if (generation == "G") then {incubatorAddress} else {breederAddress}
}

func getAssetRarity(genotype: String, generation: String) = {
  let quantity = getIntegerValue(Address(getAssetOrigin(generation)), "stats_"+genotype+"_quantity")
  let power = pow(10000 / quantity, 4, 5, 1, 2, FLOOR)
  if (power > 0) then {power} else {2}
}

func getAssetFarmingPower(assetId: ByteVector) = {
  if (assetInfo(assetId).value().issuer == Address(breederAddress) || assetInfo(assetId).value().issuer == Address(incubatorAddress)) then {
    let assetName = assetInfo(assetId).value().name
    let generation = assetName.takeRight(2).take(1)
    let gen = getGen(assetName) + "-" + generation
    (gen, getAssetRarity(gen, generation))
  } else {
    throw("not valid NFT")
  }
}


@Callable(i)
func lock() = {
  let addressStr = i.caller.toString()
  let assetId = i.payments[0].value().assetId.value()
  let assetIssuer = assetInfo(assetId).value().issuer.bytes
  let assetName = assetInfo(assetId).value().name.value()
  let assetColor = assetName.split("")[size(assetName.split(""))-1]
  let assetRarity = getAssetFarmingPower(assetId)._2

  if (assetIssuer != incubatorAddress && assetIssuer != breederAddress) then { throw("invalid NFT attached") } 
  else {
    strict perchesAvailable = match getInteger(Address(farmingAddress), "address_" + this.toString() + "_perchesAvailable_" + assetColor) {
      case b:Int => b
      case _ => 0
    }
    let eggBalance = assetBalance(this, eggAssetId)
    
    strict isOnPerch = if (assetRarity < 50 || (perchesAvailable == 0 && eggBalance < 1_0000_0000)) then {false} else {
      strict inv1 = if (perchesAvailable > 0) then { unit } else {
        invoke(Address(farmingAddress), "buyPerch", [assetColor, ""], [AttachedPayment(eggAssetId, 1_0000_0000)])
      } 
      strict inv2 = invoke(Address(farmingAddress), "stakeNFT", [], [AttachedPayment(assetId, 1)])  # TODO: jackpot staking
      true
    }

    let sterileStr = match getInteger(Address(breederAddress), "asset_"+assetId.toBase58String()+"_children") {
      case x: Int => "Sterile"
      case _ => "Fertile"
    }
    let nameSuffix = assetRarity.toString() + "%"
    let imageLink = "https://wavesducks.com/api/v1/ducks/"+assetName.drop(5).dropRight(3)+".svg?onPerch="+isOnPerch.toString()+"&color="+assetColor
    let name = if (isOnPerch) then {"Staked Duck "+nameSuffix} else {"Waves Duck "+nameSuffix}

    strict stakedNFTIdStr = match (invoke(Address(nftCreationAddress), "createNFT", [name, sterileStr + " Waves Duck " + assetName + " with rarity " + assetRarity.toString(), imageLink, "ducks"], [])) {
      case x: String => x
      case _ => throw("something went wrong during creation of NFT")
    }

    ([
      ScriptTransfer(i.caller, 1, stakedNFTIdStr.fromBase58String()),
      StringEntry("duck_" + assetId.toBase58String() + "_owner", addressStr),
      StringEntry("nft_" + stakedNFTIdStr + "_duckId", assetId.toBase58String()),
      IntegerEntry("address_" + addressStr + "_lockedDuck_" + assetId.toBase58String(), assetRarity)
    ], stakedNFTIdStr)
  }
}

@Callable(i)
func unlock() = {
  let addressStr = i.caller.toString()
  let stakedNFTId = i.payments[0].assetId.value()  # todo: check amount = 1
  let stakedNFTIdStr = stakedNFTId.toBase58String()
  let assetIdStr = tryGetString("nft_" + stakedNFTIdStr + "_duckId")
  let assetId = assetIdStr.fromBase58String()

  if (tryGetString("duck_" + assetIdStr + "_owner") != addressStr) then {throw("duck is not yours")} 
  else {
    strict assetBalanceBefore = assetBalance(this, eggAssetId)
    strict inv1 = if (assetBalance(this, assetId) > 0) then {unit} else {invoke(Address(farmingAddress), "unstakeNFT", [assetIdStr], [])}  # TODO: jackpot unstaking
    strict eggEarned = assetBalance(this, eggAssetId) - assetBalanceBefore

    strict inv2 = invoke(Address(nftCreationAddress), "burnNFT", [], i.payments)

    ([
      ScriptTransfer(i.caller, 1, assetId),
      ScriptTransfer(i.caller, eggEarned, eggAssetId),
      DeleteEntry("address_" + addressStr + "_lockedDuck_" + assetIdStr), 
      DeleteEntry("nft_" + stakedNFTIdStr + "_duckId"),
      DeleteEntry("duck_" + assetIdStr + "_owner")
    ], assetIdStr)
  }
}
