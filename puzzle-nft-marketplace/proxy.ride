{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let nftCreationAddress = base58'3PFQjjDMiZKQZdu5JqTHD7HwgSXyp9Rw9By'
let eagleBuyerAddress = base58'3P7FFQkgALLZDJpCf3smY517wjgPMswGoRP'
let signArtNftCreationAddress = base58'3PDBLdsUrcsiPxNbt8g2gQVoefKgzt3kJzV'

# wrapper contracts
let nftDuckWrapper = base58'3P3pDosq4GCwfJkvq4yqKvvoTwmoqc9qPmo'
let nftSignArtWrapper = base58'3PPgeYTWMRZ7S7jSLpnVuKKB9r6XuDk3ndC'
let nftUltraStakingWrapper = base58'3PKVgd6ds1xervK6bPXbEHBqg8ibTcf5HZk'
let nftWavesPunksWrapper = base58'3PD1sd55PYzmGUrQ896Qt3uvdbtgjCVpajE'

# ducks contracts for create nft
let incubatorAddress = base58'3PEktVux2RhchSN63DsDo4b4mz4QqzKSeDv'
let breederAddress = base58'3PDVuU45H7Eh5dmtNbnRNRStGwULA7NY6Hb'

let marketplaceContractAddress = base58'3PATXDVE53rKJtkwXYV3tvuLVS2fDtGtKCc'

# waves punks addresses
let zombieIssuerAddress = Address(base58'3P7QrWH1ETLfKAJcFHYPJmQusNbDuW98Hop')
let punksIssuerAddress = Address(base58'3P8rLVnwrTf4k5AB3emuduhZZb1yKcitTHy')
let aliensIssuerAddress = Address(base58'3PBkrb5LrGDvCwkx4VHZzZkqMNvvGqrJJWj')
let madPunksIssuerAddress = Address(base58'3PJXfYMavRVzBDXqsFfwkLdEV7yuF5RToya')

# check signArt NFT
func ifSignArtNft(asset: Asset) = {
  asset.issuer.bytes == signArtNftCreationAddress && asset.decimals == 0 && asset.reissuable == false && asset.quantity == 1
}

# check duck NFT
func ifDuckNft(asset: Asset) = {
  (asset.issuer.bytes == incubatorAddress || asset.issuer.bytes == breederAddress)
  && asset.decimals == 0 && asset.reissuable == false && asset.quantity == 1
}

# check waves punks NFT
func ifWavesPunksNft(asset: Asset) = {
  (asset.issuer == zombieIssuerAddress || asset.issuer == punksIssuerAddress || asset.issuer == aliensIssuerAddress || asset.issuer == madPunksIssuerAddress)
  && asset.decimals == 0 && asset.reissuable == false && asset.quantity == 1
}

func ifUltraStakingNft(asset: Asset) = {
  let isEagleNFT = match(getString(Address(eagleBuyerAddress), "art_" + toBase58String(asset.id) + "_type")) {
    case s:String => s == "eagle"
    case _ => false
  }
  let isAniaNFT = match(getString(Address(nftCreationAddress), "nft_" + toBase58String(asset.id) + "_issuer")) {
    case s:String => s == "3PMki5sHBsQb4KgDknbUwsL3YgxaCzaZnCJ" && asset.name.contains("Bored Ania #")
    case _ => false
  }

  isEagleNFT || isAniaNFT
}

# check marketplace NFT
func isNftFromMarketplace(asset: Asset) = {
  asset.issuer.bytes == nftCreationAddress && asset.decimals == 0 && asset.reissuable == false && asset.quantity == 1
}

# choose wrap address by nft type
func getAddressForWrap(asset: Asset) = {
  if (asset.ifUltraStakingNft()) then Address(nftUltraStakingWrapper)
  else if (asset.ifWavesPunksNft()) then Address(nftWavesPunksWrapper)
  else if (asset.ifSignArtNft()) then Address(nftSignArtWrapper)
  else if(asset.ifDuckNft()) then Address(nftDuckWrapper)
  else unit
}

# return dapp address by wrapped nft ID
func getAddressForUnwrap(nftStr: String) = {
  let isSignArt = match (getString(Address(nftSignArtWrapper), "signArtNft_" + nftStr + "_assetId")) {
    case s: String => s.size() > 0
    case _ => false
  }
  let isDuck = match (getString(Address(nftDuckWrapper), "nft_" + nftStr + "_duckId")) {
    case s: String => s.size() > 0
    case _ => false
  }
  let isUltraStaking = match (getString(Address(nftUltraStakingWrapper), "nft_" + nftStr + "_assetId")) {
    case s: String => s.size() > 0
    case _ => false
  }

  let isWavesPunks = match (getString(Address(nftWavesPunksWrapper), "nft_" + nftStr + "_assetId")) {
    case s: String => s.size() > 0
    case _ => false
  }
  
  if (isUltraStaking) then {
    Address(nftUltraStakingWrapper)
  } else if (isWavesPunks) then {
    Address(nftWavesPunksWrapper)
  } else if (isSignArt) then {
    Address(nftSignArtWrapper)
  } else if (isDuck) then {
    Address(nftDuckWrapper)
  } else unit
}

@Callable(i)
func lockAndSellNFT(buyOutPrice: Int, buyOutAssetId: String) = {

  let assetId = i.payments[0].value().assetId.value()
  let asset = assetInfo(assetId).value()

  let wrapAddress = asset.getAddressForWrap()

  # if isn't wrap nft, just send to the market, otherwise lock and send wrapped nft to the market
  let stakedNFTIdStr =
    if (wrapAddress.isDefined()) then {
      strict lockedNftStr = match invoke(wrapAddress.value(), "lock", [], [i.payments[0]]) {
        case s:String => s
        case _ => throw("Somthing wrong when lock NFT in address: " + wrapAddress.value().bytes.toBase58String())
      }
      lockedNftStr
    } else {
      asset.id.toBase58String()
    }

  if (stakedNFTIdStr.size() > 0) then {
    strict inv = invoke(Address(marketplaceContractAddress), "sellNFT",
      [buyOutPrice, buyOutAssetId],
      [AttachedPayment(stakedNFTIdStr.fromBase58String(), 1)])
    []
  } else throw("The created NFT is invalid")
}

@Callable(i)
func cancelSellAndUnlock(nftId: String) = {

  let asset = assetInfo(nftId.fromBase58String()).value()

  let wrapAddress = nftId.getAddressForUnwrap()

  # cancel sell nft from market
  if (asset.isNftFromMarketplace()) then {
    strict canceledNftStr = match invoke(Address(marketplaceContractAddress), "cancelSell", [nftId], []) {
      case s:String => s
      case _ => throw("Somthing wrong when cancel sell NFT")
    }

    # if wrapped nft, then call unlock
    if (wrapAddress.isDefined()) then {
      strict unlockedNftStr = match invoke(wrapAddress.value(), "unlock", [], [AttachedPayment(asset.id, 1)]) {
        case s:String => s
        case _ => throw("Somthing wrong when unlock NFT in address: " + wrapAddress.value().bytes.toBase58String())
      }

      [
        ScriptTransfer(i.caller, 1, unlockedNftStr.fromBase58String())
      ]
    } else {
      [
        ScriptTransfer(i.caller, 1, canceledNftStr.fromBase58String())
      ]
    }

  } else throw("Ivalid NFT attached")
}

@Callable(i)
func unlock() = {
  let asset = assetInfo(i.payments[0].assetId.value()).value()

  if (asset.isNftFromMarketplace() && i.payments[0].amount == 1) then {
    let assetIdStr = asset.id.toBase58String()
    let wrapAddress = assetIdStr.getAddressForUnwrap()
    # if wrapped nft, then call unlock
    if (wrapAddress.isDefined()) then {
      strict unlockedNftStr = match invoke(wrapAddress.value(), "unlock", [], [AttachedPayment(asset.id, 1)]) {
        case s:String => s
        case _ => throw("Somthing wrong when unlock NFT in address: " + wrapAddress.value().bytes.toBase58String())
      }

      ([
        ScriptTransfer(i.caller, 1, unlockedNftStr.fromBase58String())
      ], unlockedNftStr)
    } else {
      ([
        ScriptTransfer(i.caller, 1, asset.id)
      ], asset.id.toBase58String())
    }

  } else throw("Ivalid NFT attached")
}

@Callable(i)
func buy(nftId: String) = {
 
  strict boughtNft = match invoke(Address(marketplaceContractAddress), "buyNFT", [nftId], i.payments) {
    case s:String => s
    case _ => throw("Somthing wrong when buy NFT")
  }

  let asset = assetInfo(boughtNft.fromBase58String()).value()

  if (boughtNft.size() > 0 && asset.isNftFromMarketplace()) then {

    # check is wrap asset
    let wrapAddress = nftId.getAddressForUnwrap()
    if (wrapAddress.isDefined()) then {
      strict unlockedNftStr = match invoke(wrapAddress.value(), "unlock", [], [AttachedPayment(asset.id, 1)]) {
        case s:String => s
        case _ => throw("Somthing wrong when unlock NFT in address: " + wrapAddress.value().bytes.toBase58String())
      }
      # is wrapped, unlock and send
      [
        ScriptTransfer(i.caller, 1, unlockedNftStr.fromBase58String())
      ]
    } else {
      # is not wrapped, just send
      [
        ScriptTransfer(i.caller, 1, boughtNft.fromBase58String())
      ]
    }    
  } else throw("Ivalid bought NFT")
}

@Verifier(tx)
func verify() = sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
